runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
library(shiny); runApp('download button.R')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('download button.R')
shiny::runApp('jeeva')
runApp('plot example.R')
runApp('plot example.R')
runApp()
runApp()
runApp()
shinyApp(ui, server)
runApp('pot.R')
runApp('pot.R')
shiny::runApp('jeeva')
runApp('download button.R')
if (FALSE) {
ui <- fluidPage(
p("Choose a dataset to download."),
selectInput("dataset", "Dataset", choices = c("mtcars", "airquality")),
downloadButton("downloadData", "Download")
)
server <- function(input, output) {
# The requested dataset
data <- reactive({
get(input$dataset)
})
output$downloadData <- downloadHandler(
filename = function() {
# Use the selected dataset as the suggested file name
paste0(input$dataset, ".csv")
},
content = function(file) {
# Write the dataset to the `file` that will be downloaded
write.csv(data(), file)
}
)
}
shinyApp(ui, server)
}
if (FALSE) {
ui <- fluidPage(
p("Choose a dataset to download."),
selectInput("dataset", "Dataset", choices = c("mtcars", "airquality")),
downloadButton("downloadData", "Download")
)
server <- function(input, output) {
# The requested dataset
data <- reactive({
get(input$dataset)
})
output$downloadData <- downloadHandler(
filename = function() {
# Use the selected dataset as the suggested file name
paste0(input$dataset, ".csv")
},
content = function(file) {
# Write the dataset to the `file` that will be downloaded
write.csv(data(), file)
}
)
}
shinyApp(ui, server)
}
runApp('download button.R')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('download button.R')
runApp('pot.R')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
shiny::runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('pot.R')
runApp('word cloud.R')
library(shiny)
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(readxl)
library(tidyverse)
library(ggplot2)
# Define UI
ui <- fluidPage(
# File upload input
fileInput("file", "Choose Excel file", accept = c(".xlsx", ".xls")),
actionButton("wordcloud", "Generate word cloud"),
radioButtons("format", "Choose output format:",
choices = list("PNG" = "png", "PDF" = "pdf"),
selected = "png"),
downloadButton("download", "Download word cloud"),
plotOutput("wordcloud_plot")
)
# Define server
server <- function(input, output) {
# Read data from uploaded file
data <- reactive({
file <- input$file
if(is.null(file)) {
return(NULL)
}
readxl::read_excel(file$datapath)
})
# Preprocess text data
docs <- reactive({
data <- data()
if(is.null(data)) {
return(NULL)
}
Corpus(VectorSource(data$Review)) %>%
# Remove special characters
tm_map(content_transformer(gsub), pattern = "/|@|\\|", replacement = " ") %>%
# Convert to lowercase
tm_map(content_transformer(tolower)) %>%
# Remove numbers
tm_map(removeNumbers) %>%
# Remove English stopwords
tm_map(removeWords, stopwords("english")) %>%
# Remove custom stopwords
tm_map(removeWords, c("blabla1", "blabla2")) %>%
# Remove punctuations
tm_map(removePunctuation) %>%
# Strip whitespace
tm_map(stripWhitespace) %>%
# Stem words
tm_map(stemDocument)
})
# Generate word cloud from preprocessed text data
wordcloud_data <- reactive({
docs <- docs()
if(is.null(docs)) {
return(NULL)
}
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m), decreasing = TRUE)
d <- data.frame(word = names(v), freq = v)
d
})
# Render word cloud plot
output$wordcloud_plot <- renderPlot({
wordcloud_data <- wordcloud_data()
if (is.null(wordcloud_data)) {
return(NULL)
}
wordcloud(words = wordcloud_data$word, freq = wordcloud_data$freq,
min.freq = 1, max.words = 200, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
})
# Download word cloud in selected format
output$download <- downloadHandler(
filename = function() {
paste("wordcloud", Sys.Date(),input$format, sep = ".")
},
content = function(file) {
if (input$format == "png") {
png(file)
}
else
{
pdf(file)
}
plotOutput(wordcloud_data())
dev.off()
}
)
barplot(wordcloud_data$word,las = 2,col = rainbow(50))
barplot(wordcloud_data$word,las = 2,col = rainbow(50))
exit
runApp('word cloud.R')
runApp('word cloud.R')
runApp('word cloud.R')
runApp('word cloud.R')
runApp('word cloud.R')
runApp('word cloud.R')
runApp('word cloud.R')
runApp('word cloud.R')
runApp('word cloud.R')
runApp('jeeva')
shiny::runApp('jeeva')
shiny::runApp('jeeva')
from textblob import TextBlob
reticulate::repl_python()
from textblob import TextBlob
def OTE_for_csv(data):
opinion_term = []
for text in data['text']:
blob = TextBlob(text)
for sentence in blob.sentences:
for word, tag in sentence.tags:
if tag == 'JJ' or tag == 'JJR' or tag == 'JJS':
opinion_terms.append(word)
return OTE_for_csv
import pandas as pd
data = pd.read_excel('data_1.xlsx')
data = pd.read_excel('data.xlsx')
data = pd.read_csv('data.csv')
data
OTE_for_csv(data)
OTE_for_csv(data)
from textblob import TextBlob
def OTE_for_csv(data):
opinion_terms = []
for text in data['text']:
blob = TextBlob(text)
for sentence in blob.sentences:
for word, tag in sentence.tags:
if tag == 'JJ' or tag == 'JJR' or tag == 'JJS':
opinion_terms.append(word)
return OTE_for_csv
data = pd.read_csv('data.csv')
data
OTE_for_csv(data)
from textblob import TextBlob
def OTE_for_csv(data):
opinion_terms = []
for text in data['text']:
blob = TextBlob(text)
for sentence in blob.sentences:
for word, tag in sentence.tags:
if tag == 'JJ' or tag == 'JJR' or tag == 'JJS':
opinion_terms.append(word)
data['opinion_terms'] = opinion_terms
return OTE_for_csv
OTE_for_csv(data)
OTE_for_csv(data)
from textblob import TextBlob
def OTE_for_csv(text):
for text in data['text']:
blob = TextBlob(text)
opinion_terms = []
for sentence in blob.sentences:
for word, tag in sentence.tags:
if tag == 'JJ' or tag == 'JJR' or tag == 'JJS':
opinion_terms.append(word)
data["opinion_term"] = opinion_terms
return data
import pandas as pd
data = pd.read_csv('data.csv')
data
OTE_for_csv(data)
from textblob import TextBlob
def OTE_for_csv(data):
for text in data['text']:
blob = TextBlob(text)
opinion_terms = []
for sentence in blob.sentences:
for word, tag in sentence.tags:
if tag == 'JJ' or tag == 'JJR' or tag == 'JJS':
opinion_terms.append(word)
data["opinion_terms"] = opinion_terms
return data
OTE_for_csv(data)
from textblob import TextBlob
def OTE_for_csv(data):
for text in data['text']:
blob = TextBlob(text)
opinion_terms = []
for sentence in blob.sentences:
for word, tag in sentence.tags:
if tag == 'JJ' or tag == 'JJR' or tag == 'JJS':
opinion_terms.append(word)
data["opinion_terms"] = opinion_terms
return data
OTE_for_csv(data)
quit
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
shiny::runApp('jeeva')
shiny::runApp('jeeva')
runApp('jeeva')
library(shiny); runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
data <- read_excel('data_1.xlsx')
data <- read.csv('data.csv')
data
runApp('pot.R')
library(tidyverse)
# Define the text
text <- "The quick brown fox jumps over the lazy dog. The dog barks and the fox runs away."
word_freq <- tibble(word = str_split(text, "\\W+")[[1]]) %>%
count(word, sort = TRUE)
ggplot(word_freq, aes(x = word, y = n)) +
geom_bar(stat = "identity") +
xlab("Word") +
ylab("Frequency") +
ggtitle("Word Frequency")
runApp('pot.R')
df <- data.frame(stringsAsFactors=FALSE,
word = c("get", "just", "good", "like", "know", "day", "new"),
freq = c(1672, 1639, 1402, 1227, 1175, 1150, 110)
)
df
library(ggplot2)
ggplot(df, aes(x = reorder(word, freq), y = freq)) +
geom_col() +
labs(title="Twitter ",
x = NULL,
y = "Frequency") +
coord_flip()
prof <- read.csv("data.csv", stringsAsFactors = FALSE)
str(prof)
prof
prof1.tm <- unnest_tokens(prof, word, comments)
prof1.tm <- unnest_tokens(prof, word, text)
install.packages("tidytext")
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(shiny); runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
library(shiny); runApp('pot.R')
library(shiny); runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
install.packages("ggplot")
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
library(shiny); runApp('pot.R')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(shiny); runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(shiny); runApp('pot.R')
install.packages(c("BH", "blob", "cachem", "car", "caret", "checkmate", "cli", "colorspace", "commonmark", "data.table", "dbplyr", "digest", "dtplyr", "e1071", "evaluate", "fansi", "fastmap", "faux", "fontawesome", "forecast", "Formula", "fs", "future", "gargle", "ggfortify", "ggrepel", "gh", "googledrive", "googlesheets4", "gower", "gtable", "hardhat", "haven", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "interp", "ipred", "janitor", "knitr", "later", "lava", "lme4", "markdown", "mlbench", "modelr", "mongolite", "multcomp", "openssl", "openxlsx", "packrat", "parallelly", "pbkrtest", "processx", "prodlim", "profvis", "ps", "psych", "quantmod", "quantreg", "ranger", "Rcpp", "RcppArmadillo", "recipes", "repr", "rlang", "rmarkdown", "RSQLite", "s2", "sass", "seriation", "sf", "stringi", "testthat", "TH.data", "tibble", "tibbletime", "timechange", "timetk", "tinytex", "torch", "truncnorm", "tseries", "TSP", "units", "utf8", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xgboost", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("BH", "blob", "cachem", "car", "caret", "checkmate", "cli", "colorspace", "commonmark", "data.table", "dbplyr", "digest", "dtplyr", "e1071", "evaluate", "fansi", "fastmap", "faux", "fontawesome", "forecast", "Formula", "fs", "future", "gargle", "ggfortify", "ggrepel", "gh", "googledrive", "googlesheets4", "gower", "gtable", "hardhat", "haven", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "interp", "ipred", "janitor", "knitr", "later", "lava", "lme4", "markdown", "mlbench", "modelr", "mongolite", "multcomp", "openssl", "openxlsx", "packrat", "parallelly", "pbkrtest", "processx", "prodlim", "profvis", "ps", "psych", "quantmod", "quantreg", "ranger", "Rcpp", "RcppArmadillo", "recipes", "repr", "rlang", "rmarkdown", "RSQLite", "s2", "sass", "seriation", "sf", "stringi", "testthat", "TH.data", "tibble", "tibbletime", "timechange", "timetk", "tinytex", "torch", "truncnorm", "tseries", "TSP", "units", "utf8", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xgboost", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("BH", "blob", "cachem", "car", "caret", "checkmate", "cli", "colorspace", "commonmark", "data.table", "dbplyr", "digest", "dtplyr", "e1071", "evaluate", "fansi", "fastmap", "faux", "fontawesome", "forecast", "Formula", "fs", "future", "gargle", "ggfortify", "ggrepel", "gh", "googledrive", "googlesheets4", "gower", "gtable", "hardhat", "haven", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "interp", "ipred", "janitor", "knitr", "later", "lava", "lme4", "markdown", "mlbench", "modelr", "mongolite", "multcomp", "openssl", "openxlsx", "packrat", "parallelly", "pbkrtest", "processx", "prodlim", "profvis", "ps", "psych", "quantmod", "quantreg", "ranger", "Rcpp", "RcppArmadillo", "recipes", "repr", "rlang", "rmarkdown", "RSQLite", "s2", "sass", "seriation", "sf", "stringi", "testthat", "TH.data", "tibble", "tibbletime", "timechange", "timetk", "tinytex", "torch", "truncnorm", "tseries", "TSP", "units", "utf8", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xgboost", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("BH", "blob", "cachem", "car", "caret", "checkmate", "cli", "colorspace", "commonmark", "data.table", "dbplyr", "digest", "dtplyr", "e1071", "evaluate", "fansi", "fastmap", "faux", "fontawesome", "forecast", "Formula", "fs", "future", "gargle", "ggfortify", "ggrepel", "gh", "googledrive", "googlesheets4", "gower", "gtable", "hardhat", "haven", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "interp", "ipred", "janitor", "knitr", "later", "lava", "lme4", "markdown", "mlbench", "modelr", "mongolite", "multcomp", "openssl", "openxlsx", "packrat", "parallelly", "pbkrtest", "processx", "prodlim", "profvis", "ps", "psych", "quantmod", "quantreg", "ranger", "Rcpp", "RcppArmadillo", "recipes", "repr", "rlang", "rmarkdown", "RSQLite", "s2", "sass", "seriation", "sf", "stringi", "testthat", "TH.data", "tibble", "tibbletime", "timechange", "timetk", "tinytex", "torch", "truncnorm", "tseries", "TSP", "units", "utf8", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xgboost", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("BH", "blob", "cachem", "car", "caret", "checkmate", "cli", "colorspace", "commonmark", "data.table", "dbplyr", "digest", "dtplyr", "e1071", "evaluate", "fansi", "fastmap", "faux", "fontawesome", "forecast", "Formula", "fs", "future", "gargle", "ggfortify", "ggrepel", "gh", "googledrive", "googlesheets4", "gower", "gtable", "hardhat", "haven", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "interp", "ipred", "janitor", "knitr", "later", "lava", "lme4", "markdown", "mlbench", "modelr", "mongolite", "multcomp", "openssl", "openxlsx", "packrat", "parallelly", "pbkrtest", "processx", "prodlim", "profvis", "ps", "psych", "quantmod", "quantreg", "ranger", "Rcpp", "RcppArmadillo", "recipes", "repr", "rlang", "rmarkdown", "RSQLite", "s2", "sass", "seriation", "sf", "stringi", "testthat", "TH.data", "tibble", "tibbletime", "timechange", "timetk", "tinytex", "torch", "truncnorm", "tseries", "TSP", "units", "utf8", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xgboost", "xml2", "xts", "yaml", "zip", "zoo"))
library(shiny); runApp('pot.R')
runApp('pot.R')
install.packages("rlang")
install.packages("rlang")
library(shiny); runApp('pot.R')
runApp('pot.R')
runApp('jeeva')
shiny::runApp('jeeva')
install.packages("scales")
runApp('jeeva')
install.packages("fastmap")
install.packages("fastmap")
install.packages("fastmap")
install.packages("fastmap")
shiny::runApp('jeeva')
install.packages(c("cli", "digest", "fastmap", "htmltools", "httpuv", "imager", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "httpuv", "imager", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "httpuv", "imager", "later", "Rcpp", "rlang"))
shiny::runApp('jeeva')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
shiny::runApp('jeeva')
shiny::runApp('jeeva')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('jeeva')
install.packages(c("later", "Rcpp", "rlang"))
install.packages(c("later", "Rcpp", "rlang"))
install.packages(c("later", "Rcpp", "rlang"))
install.packages("scales")
shiny::runApp('jeeva')
install.packages(c("cli", "digest", "fastmap", "htmltools", "httpuv", "imager", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "httpuv", "imager", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "httpuv", "imager", "later", "Rcpp", "rlang"))
install.packages(c("cli", "digest", "fastmap", "htmltools", "httpuv", "imager", "later", "Rcpp", "rlang"))
shiny::runApp('jeeva')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp('jeeva')
source('login.R')
runApp('jeeva')
install.packages("tidyverse")
install.packages("tidyverse")
shiny::runApp('jeeva')
runApp('pot.R')
remove.packages("ggplot2")
runApp('pot.R')
remove.packages("tidyverse")
remove.packages("tidytext")
runApp('pot.R')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(shiny); runApp('pot.R')
runApp('pot.R')
shiny::runApp('jeeva')
packageVersion("fastmap")
install.packages("fastmap")
install.packages("fastmap")
install.packages("fastmap")
install.packages("fastmap")
detach(package:dplyr)
detach(package:dplyr)
detach(package:dplyr)
remove.packages("dplyr")
install.packages("dplyr", checkBuilt = TRUE)
install.packages("dplyr", checkBuilt = TRUE)
install.packages("dplyr", checkBuilt = TRUE)
shiny::runApp('jeeva')
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
shiny::runApp('jeeva')
runApp('pot.R')
runApp('pot.R')
install.packages("ggplot2")
library(shiny); runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('jeeva')
runApp('jeeva')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('download button.R')
runApp('pot.R')
runApp('download button.R')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('pot.R')
runApp('download button.R')
runApp('download button.R')
runApp('download button.R')
runApp('jeeva')
runApp('pot.R')
runApp('pot.R')
runApp('jeeva')
shiny::runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
library(shiny); runApp('jeeva/app3.R')
runApp()
runApp()
runApp()
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
runApp('jeeva')
gc()
runApp('jeeva')
shiny::runApp('jeeva')
runApp()
runApp()
library(shiny); source('login.R')
source('login.R')
source('login.R')
